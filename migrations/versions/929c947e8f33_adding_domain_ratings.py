"""Adding domain ratings

Revision ID: 929c947e8f33
Revises: 158c26933ce4
Create Date: 2025-01-16 17:53:12.722851

"""
from typing import Sequence, Union

import csv
from sqlalchemy import create_engine, Table, MetaData, text
from sqlalchemy.orm import sessionmaker
from alembic import op
import sqlalchemy as sa
import os
import uuid


# revision identifiers, used by Alembic.
revision: str = '929c947e8f33'
down_revision: Union[str, None] = '158c26933ce4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def insert_data_from_csv():
    # Define path to your CSV file
    csv_file_path = os.path.join(os.path.dirname(__file__), 'data/domain_pc1.csv')  # Adjust the path as necessary
    
    # Create a database engine. Assuming the target database URL is in your alembic.ini.
    bind = op.get_bind()  # This retrieves the current database connection

    # Define a session to interact with the database.
    Session = sessionmaker(bind=bind)
    session = Session()

    try:
        # Open and read the CSV file
        with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)  # This assumes the CSV has headers
            # Loop through each row in the CSV
            for row in reader:
                
                domain_id = str(uuid.uuid4())
                
                # Example: Insert data into the 'domains' table
                # You may adjust the table and columns based on your actual schema
                # Assuming the table name is 'domains' with columns 'domain_name' and 'credibility_score'
                sql = text("""
                    INSERT INTO domains (id, domain_name, credibility_score, is_reliable, created_at, updated_at)
                    VALUES (:id, :domain_name, :credibility_score, TRUE, NOW(), NOW())
                    ON CONFLICT (domain_name)
                    DO UPDATE SET
                        credibility_score = EXCLUDED.credibility_score,
                        is_reliable = TRUE,
                        updated_at = NOW()
                """)
                session.execute(sql, {'id': domain_id,'domain_name': row['domain'], 'credibility_score': row['pc1']})
        
        
        session.commit()  # Commit the transaction

    except Exception as e:
        session.rollback()  # Rollback in case of error
        raise e
    finally:
        session.close()  # Close the session

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table(
    #     "domain_ratings",
    #     sa.Column("domain_name", sa.String(), nullable=False),
    #     sa.Column("rating", sa.Float(), nullable=False),
    #     sa.PrimaryKeyConstraint("domain_name"),
    # )
    # ### end Alembic commands ###
    insert_data_from_csv()

    


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table("domain_ratings")
    # ### end Alembic commands ###
    
    bind = op.get_bind()  # This retrieves the current database connection

    # Define a session to interact with the database.
    Session = sessionmaker(bind=bind)
    session = Session()

    try:
        sql = text("""
            DELETE FROM domains
            WHERE created_at >= (NOW() - INTERVAL '4 hour') 
            AND updated_at >= (NOW() - INTERVAL '4 hour');
        """)
        # Adjust the interval based on when the upgrade was executed.

        # Alternatively, delete rows with specific criteria (e.g., domain names added in the upgrade):
        # sql = text("""
        #     DELETE FROM domains
        #     WHERE domain_name IN ('example1.com', 'example2.com');
        # """)

        session.execute(sql)
        session.commit()

    except Exception as e:
        session.rollback()  # Rollback in case of error
        raise e
    finally:
        session.close()  # Close the session
